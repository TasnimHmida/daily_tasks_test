// Mocks generated by Mockito 5.4.4 from annotations
// in daily_tasks_test/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:io' as _i29;

import 'package:daily_tasks_test/core/error/failures.dart' as _i14;
import 'package:daily_tasks_test/core/network/network_info.dart' as _i44;
import 'package:daily_tasks_test/core/utils/pref_utils.dart' as _i45;
import 'package:daily_tasks_test/features/authentication/data/data_sources/auth_remote_data_source.dart'
    as _i38;
import 'package:daily_tasks_test/features/authentication/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:daily_tasks_test/features/authentication/domain/use_cases/login_usecase.dart'
    as _i12;
import 'package:daily_tasks_test/features/authentication/domain/use_cases/logout_usecase.dart'
    as _i15;
import 'package:daily_tasks_test/features/authentication/domain/use_cases/register_usecase.dart'
    as _i16;
import 'package:daily_tasks_test/features/chat/data/data_sources/chat_remote_data_source.dart'
    as _i40;
import 'package:daily_tasks_test/features/chat/data/models/conversation_model.dart'
    as _i19;
import 'package:daily_tasks_test/features/chat/data/models/message_model.dart'
    as _i21;
import 'package:daily_tasks_test/features/chat/domain/repositories/chat_repository.dart'
    as _i4;
import 'package:daily_tasks_test/features/chat/domain/use_cases/create_conversation_usecase.dart'
    as _i17;
import 'package:daily_tasks_test/features/chat/domain/use_cases/get_conversations_usecase.dart'
    as _i18;
import 'package:daily_tasks_test/features/chat/domain/use_cases/get_messages_usecase.dart'
    as _i20;
import 'package:daily_tasks_test/features/chat/domain/use_cases/send_message_usecase.dart'
    as _i22;
import 'package:daily_tasks_test/features/manage_user/data/data_sources/user_remote_data_source.dart'
    as _i43;
import 'package:daily_tasks_test/features/manage_user/data/models/user_model.dart'
    as _i9;
import 'package:daily_tasks_test/features/manage_user/domain/repositories/user_repository.dart'
    as _i5;
import 'package:daily_tasks_test/features/manage_user/domain/use_cases/get_all_users_usecase.dart'
    as _i23;
import 'package:daily_tasks_test/features/manage_user/domain/use_cases/get_user_info_usecase.dart'
    as _i24;
import 'package:daily_tasks_test/features/notifications/data/data_sources/notification_remote_data_source.dart'
    as _i41;
import 'package:daily_tasks_test/features/notifications/data/models/notification_model.dart'
    as _i27;
import 'package:daily_tasks_test/features/notifications/domain/repositories/notification_repository.dart'
    as _i6;
import 'package:daily_tasks_test/features/notifications/domain/use_cases/create_new_notification_usecase.dart'
    as _i25;
import 'package:daily_tasks_test/features/notifications/domain/use_cases/get_notifications_usecase.dart'
    as _i26;
import 'package:daily_tasks_test/features/profile/data/data_sources/profile_remote_data_source.dart'
    as _i42;
import 'package:daily_tasks_test/features/profile/domain/repositories/profile_repository.dart'
    as _i7;
import 'package:daily_tasks_test/features/profile/domain/use_cases/update_user_usecase.dart'
    as _i28;
import 'package:daily_tasks_test/features/projects/data/data_sources/projects_remote_data_source.dart'
    as _i39;
import 'package:daily_tasks_test/features/projects/data/models/project_model.dart'
    as _i10;
import 'package:daily_tasks_test/features/projects/data/models/task_model.dart'
    as _i31;
import 'package:daily_tasks_test/features/projects/domain/repositories/projects_repository.dart'
    as _i8;
import 'package:daily_tasks_test/features/projects/domain/use_cases/add_task_usecase.dart'
    as _i30;
import 'package:daily_tasks_test/features/projects/domain/use_cases/create_project_usecase.dart'
    as _i33;
import 'package:daily_tasks_test/features/projects/domain/use_cases/get_all_projects_usecase.dart'
    as _i35;
import 'package:daily_tasks_test/features/projects/domain/use_cases/get_project_by_id_usecase.dart'
    as _i37;
import 'package:daily_tasks_test/features/projects/domain/use_cases/get_project_tasks_usecase.dart'
    as _i36;
import 'package:daily_tasks_test/features/projects/domain/use_cases/update_project_usecase.dart'
    as _i34;
import 'package:daily_tasks_test/features/projects/domain/use_cases/update_task_usecase.dart'
    as _i32;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i46;
import 'package:supabase_auth_ui/supabase_auth_ui.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChatRepository_2 extends _i1.SmartFake
    implements _i4.ChatRepository {
  _FakeChatRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserRepository_3 extends _i1.SmartFake
    implements _i5.UserRepository {
  _FakeUserRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationsRepository_4 extends _i1.SmartFake
    implements _i6.NotificationsRepository {
  _FakeNotificationsRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProfileRepository_5 extends _i1.SmartFake
    implements _i7.ProfileRepository {
  _FakeProfileRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProjectsRepository_6 extends _i1.SmartFake
    implements _i8.ProjectsRepository {
  _FakeProjectsRepository_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_7 extends _i1.SmartFake implements _i9.UserModel {
  _FakeUserModel_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnit_8 extends _i1.SmartFake implements _i3.Unit {
  _FakeUnit_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProjectModel_9 extends _i1.SmartFake implements _i10.ProjectModel {
  _FakeProjectModel_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoTrueClient_10 extends _i1.SmartFake implements _i11.GoTrueClient {
  _FakeGoTrueClient_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFunctionsClient_11 extends _i1.SmartFake
    implements _i11.FunctionsClient {
  _FakeFunctionsClient_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseStorageClient_12 extends _i1.SmartFake
    implements _i11.SupabaseStorageClient {
  _FakeSupabaseStorageClient_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeClient_13 extends _i1.SmartFake
    implements _i11.RealtimeClient {
  _FakeRealtimeClient_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestClient_14 extends _i1.SmartFake
    implements _i11.PostgrestClient {
  _FakePostgrestClient_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQueryBuilder_15 extends _i1.SmartFake
    implements _i11.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQuerySchema_16 extends _i1.SmartFake
    implements _i11.SupabaseQuerySchema {
  _FakeSupabaseQuerySchema_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestFilterBuilder_17<T1> extends _i1.SmartFake
    implements _i11.PostgrestFilterBuilder<T1> {
  _FakePostgrestFilterBuilder_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeChannel_18 extends _i1.SmartFake
    implements _i11.RealtimeChannel {
  _FakeRealtimeChannel_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i12.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>> call(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            email,
            password,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>>.value(
            _FakeEither_1<_i14.Failure, _i9.UserModel>(
          this,
          Invocation.method(
            #call,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>>);
}

/// A class which mocks [LogoutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUseCase extends _i1.Mock implements _i15.LogoutUseCase {
  MockLogoutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [RegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUseCase extends _i1.Mock implements _i16.RegisterUseCase {
  MockRegisterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> call({
    required String? userName,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #userName: userName,
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #userName: userName,
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [CreateConversationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateConversationUseCase extends _i1.Mock
    implements _i17.CreateConversationUseCase {
  MockCreateConversationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.ChatRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> call(
          _i9.UserModel? userTwo) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [userTwo],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [userTwo],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [GetConversationsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConversationsUseCase extends _i1.Mock
    implements _i18.GetConversationsUseCase {
  MockGetConversationsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.ChatRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i19.ConversationModel>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i13.Future<
                _i3.Either<_i14.Failure, List<_i19.ConversationModel>>>.value(
            _FakeEither_1<_i14.Failure, List<_i19.ConversationModel>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, List<_i19.ConversationModel>>>);
}

/// A class which mocks [GetMessagesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMessagesUseCase extends _i1.Mock
    implements _i20.GetMessagesUseCase {
  MockGetMessagesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.ChatRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i21.MessageModel>>> call(
          String? conversationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [conversationId],
        ),
        returnValue: _i13
            .Future<_i3.Either<_i14.Failure, List<_i21.MessageModel>>>.value(
            _FakeEither_1<_i14.Failure, List<_i21.MessageModel>>(
          this,
          Invocation.method(
            #call,
            [conversationId],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, List<_i21.MessageModel>>>);
}

/// A class which mocks [SendMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendMessageUseCase extends _i1.Mock
    implements _i22.SendMessageUseCase {
  MockSendMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.ChatRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> call(
    String? content,
    String? conversationId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            content,
            conversationId,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [
              content,
              conversationId,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [GetAllUsersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllUsersUseCase extends _i1.Mock
    implements _i23.GetAllUsersUseCase {
  MockGetAllUsersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.UserRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i9.UserModel>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i13.Future<_i3.Either<_i14.Failure, List<_i9.UserModel>>>.value(
                _FakeEither_1<_i14.Failure, List<_i9.UserModel>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, List<_i9.UserModel>>>);
}

/// A class which mocks [GetUserInfoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserInfoUseCase extends _i1.Mock
    implements _i24.GetUserInfoUseCase {
  MockGetUserInfoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_3(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.UserRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>>.value(
            _FakeEither_1<_i14.Failure, _i9.UserModel>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>>);
}

/// A class which mocks [CreateNewNotificationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateNewNotificationUseCase extends _i1.Mock
    implements _i25.CreateNewNotificationUseCase {
  MockCreateNewNotificationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.NotificationsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNotificationsRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.NotificationsRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> call(
    String? userId,
    String? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            userId,
            content,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [
              userId,
              content,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [GetNotificationsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNotificationsUseCase extends _i1.Mock
    implements _i26.GetNotificationsUseCase {
  MockGetNotificationsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.NotificationsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNotificationsRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.NotificationsRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i27.NotificationModel>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i13.Future<
                _i3.Either<_i14.Failure, List<_i27.NotificationModel>>>.value(
            _FakeEither_1<_i14.Failure, List<_i27.NotificationModel>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, List<_i27.NotificationModel>>>);
}

/// A class which mocks [UpdateUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserUseCase extends _i1.Mock implements _i28.UpdateUserUseCase {
  MockUpdateUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.ProfileRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProfileRepository_5(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.ProfileRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> call(
    _i9.UserModel? user,
    _i29.File? image,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            user,
            image,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [
              user,
              image,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [AddTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTaskUseCase extends _i1.Mock implements _i30.AddTaskUseCase {
  MockAddTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.ProjectsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProjectsRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.ProjectsRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> call(
    _i31.TaskModel? task,
    double? percentage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            task,
            percentage,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [
              task,
              percentage,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [UpdateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTaskUseCase extends _i1.Mock implements _i32.UpdateTaskUseCase {
  MockUpdateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.ProjectsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProjectsRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.ProjectsRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> call(
    _i31.TaskModel? task,
    double? percentage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            task,
            percentage,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [
              task,
              percentage,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [CreateProjectUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProjectUseCase extends _i1.Mock
    implements _i33.CreateProjectUseCase {
  MockCreateProjectUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.ProjectsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProjectsRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.ProjectsRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> call(
          _i10.ProjectModel? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [project],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [project],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [UpdateProjectUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProjectUseCase extends _i1.Mock
    implements _i34.UpdateProjectUseCase {
  MockUpdateProjectUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.ProjectsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProjectsRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.ProjectsRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> call(
          _i10.ProjectModel? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [project],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [project],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [GetAllProjectsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllProjectsUseCase extends _i1.Mock
    implements _i35.GetAllProjectsUseCase {
  MockGetAllProjectsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.ProjectsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProjectsRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.ProjectsRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i10.ProjectModel>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i13
            .Future<_i3.Either<_i14.Failure, List<_i10.ProjectModel>>>.value(
            _FakeEither_1<_i14.Failure, List<_i10.ProjectModel>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, List<_i10.ProjectModel>>>);
}

/// A class which mocks [GetProjectTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProjectTasksUseCase extends _i1.Mock
    implements _i36.GetProjectTasksUseCase {
  MockGetProjectTasksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.ProjectsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProjectsRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.ProjectsRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i31.TaskModel>>> call(
          String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [projectId],
        ),
        returnValue:
            _i13.Future<_i3.Either<_i14.Failure, List<_i31.TaskModel>>>.value(
                _FakeEither_1<_i14.Failure, List<_i31.TaskModel>>(
          this,
          Invocation.method(
            #call,
            [projectId],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, List<_i31.TaskModel>>>);
}

/// A class which mocks [GetProjectByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProjectByIdUseCase extends _i1.Mock
    implements _i37.GetProjectByIdUseCase {
  MockGetProjectByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.ProjectsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProjectsRepository_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.ProjectsRepository);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i10.ProjectModel>> call(
          String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [projectId],
        ),
        returnValue:
            _i13.Future<_i3.Either<_i14.Failure, _i10.ProjectModel>>.value(
                _FakeEither_1<_i14.Failure, _i10.ProjectModel>(
          this,
          Invocation.method(
            #call,
            [projectId],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i10.ProjectModel>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i2.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>>.value(
            _FakeEither_1<_i14.Failure, _i9.UserModel>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> register({
    required String? userName,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #userName: userName,
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #register,
            [],
            {
              #userName: userName,
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>> getUserInfo() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>>.value(
            _FakeEither_1<_i14.Failure, _i9.UserModel>(
          this,
          Invocation.method(
            #getUserInfo,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> signOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i38.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i9.UserModel> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i13.Future<_i9.UserModel>.value(_FakeUserModel_7(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i13.Future<_i9.UserModel>);

  @override
  _i13.Future<_i3.Unit> signUp({
    required String? email,
    required String? password,
    required String? userName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
            #userName: userName,
          },
        ),
        returnValue: _i13.Future<_i3.Unit>.value(_FakeUnit_8(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
              #userName: userName,
            },
          ),
        )),
      ) as _i13.Future<_i3.Unit>);

  @override
  _i13.Future<_i3.Unit> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i13.Future<_i3.Unit>.value(_FakeUnit_8(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Unit>);

  @override
  _i13.Future<_i9.UserModel> getUserInfo() => (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [],
        ),
        returnValue: _i13.Future<_i9.UserModel>.value(_FakeUserModel_7(
          this,
          Invocation.method(
            #getUserInfo,
            [],
          ),
        )),
      ) as _i13.Future<_i9.UserModel>);
}

/// A class which mocks [ProjectsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsRepository extends _i1.Mock
    implements _i8.ProjectsRepository {
  MockProjectsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i10.ProjectModel>>>
      getAllProjects() => (super.noSuchMethod(
            Invocation.method(
              #getAllProjects,
              [],
            ),
            returnValue: _i13.Future<
                    _i3.Either<_i14.Failure, List<_i10.ProjectModel>>>.value(
                _FakeEither_1<_i14.Failure, List<_i10.ProjectModel>>(
              this,
              Invocation.method(
                #getAllProjects,
                [],
              ),
            )),
          ) as _i13.Future<_i3.Either<_i14.Failure, List<_i10.ProjectModel>>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i10.ProjectModel>> getProjectById(
          String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectById,
          [projectId],
        ),
        returnValue:
            _i13.Future<_i3.Either<_i14.Failure, _i10.ProjectModel>>.value(
                _FakeEither_1<_i14.Failure, _i10.ProjectModel>(
          this,
          Invocation.method(
            #getProjectById,
            [projectId],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i10.ProjectModel>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i31.TaskModel>>> getProjectTasks(
          String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectTasks,
          [projectId],
        ),
        returnValue:
            _i13.Future<_i3.Either<_i14.Failure, List<_i31.TaskModel>>>.value(
                _FakeEither_1<_i14.Failure, List<_i31.TaskModel>>(
          this,
          Invocation.method(
            #getProjectTasks,
            [projectId],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, List<_i31.TaskModel>>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> createProject(
          _i10.ProjectModel? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [project],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #createProject,
            [project],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> updateProject(
          _i10.ProjectModel? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #updateProject,
            [project],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> addTask(
    _i31.TaskModel? task,
    double? percentage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [
            task,
            percentage,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #addTask,
            [
              task,
              percentage,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> updateTask(
    _i31.TaskModel? task,
    double? percentage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [
            task,
            percentage,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #updateTask,
            [
              task,
              percentage,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [ProjectsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsRemoteDataSource extends _i1.Mock
    implements _i39.ProjectsRemoteDataSource {
  MockProjectsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<List<_i10.ProjectModel>> getAllProjects() => (super.noSuchMethod(
        Invocation.method(
          #getAllProjects,
          [],
        ),
        returnValue:
            _i13.Future<List<_i10.ProjectModel>>.value(<_i10.ProjectModel>[]),
      ) as _i13.Future<List<_i10.ProjectModel>>);

  @override
  _i13.Future<_i10.ProjectModel> getProjectById(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectById,
          [projectId],
        ),
        returnValue: _i13.Future<_i10.ProjectModel>.value(_FakeProjectModel_9(
          this,
          Invocation.method(
            #getProjectById,
            [projectId],
          ),
        )),
      ) as _i13.Future<_i10.ProjectModel>);

  @override
  _i13.Future<_i3.Unit> createProject(_i10.ProjectModel? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [project],
        ),
        returnValue: _i13.Future<_i3.Unit>.value(_FakeUnit_8(
          this,
          Invocation.method(
            #createProject,
            [project],
          ),
        )),
      ) as _i13.Future<_i3.Unit>);

  @override
  _i13.Future<_i3.Unit> updateProject(_i10.ProjectModel? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i13.Future<_i3.Unit>.value(_FakeUnit_8(
          this,
          Invocation.method(
            #updateProject,
            [project],
          ),
        )),
      ) as _i13.Future<_i3.Unit>);

  @override
  _i13.Future<List<_i31.TaskModel>> getProjectTasks(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectTasks,
          [projectId],
        ),
        returnValue:
            _i13.Future<List<_i31.TaskModel>>.value(<_i31.TaskModel>[]),
      ) as _i13.Future<List<_i31.TaskModel>>);

  @override
  _i13.Future<_i3.Unit> addTask(
    _i31.TaskModel? task,
    double? percentage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [
            task,
            percentage,
          ],
        ),
        returnValue: _i13.Future<_i3.Unit>.value(_FakeUnit_8(
          this,
          Invocation.method(
            #addTask,
            [
              task,
              percentage,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Unit>);

  @override
  _i13.Future<_i3.Unit> updateTask(
    _i31.TaskModel? task,
    double? percentage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [
            task,
            percentage,
          ],
        ),
        returnValue: _i13.Future<_i3.Unit>.value(_FakeUnit_8(
          this,
          Invocation.method(
            #updateTask,
            [
              task,
              percentage,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Unit>);
}

/// A class which mocks [ChatRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatRepository extends _i1.Mock implements _i4.ChatRepository {
  MockChatRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> createConversation(
          _i9.UserModel? userTwo) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConversation,
          [userTwo],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #createConversation,
            [userTwo],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i19.ConversationModel>>>
      getConversations() => (super.noSuchMethod(
            Invocation.method(
              #getConversations,
              [],
            ),
            returnValue: _i13.Future<
                    _i3
                    .Either<_i14.Failure, List<_i19.ConversationModel>>>.value(
                _FakeEither_1<_i14.Failure, List<_i19.ConversationModel>>(
              this,
              Invocation.method(
                #getConversations,
                [],
              ),
            )),
          ) as _i13
              .Future<_i3.Either<_i14.Failure, List<_i19.ConversationModel>>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i21.MessageModel>>> getMessages(
          String? conversationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [conversationId],
        ),
        returnValue: _i13
            .Future<_i3.Either<_i14.Failure, List<_i21.MessageModel>>>.value(
            _FakeEither_1<_i14.Failure, List<_i21.MessageModel>>(
          this,
          Invocation.method(
            #getMessages,
            [conversationId],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, List<_i21.MessageModel>>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> sendMessage(
    String? content,
    String? conversationId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            content,
            conversationId,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #sendMessage,
            [
              content,
              conversationId,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [ChatRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatRemoteDataSource extends _i1.Mock
    implements _i40.ChatRemoteDataSource {
  MockChatRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.Unit> createConversation(_i9.UserModel? userTwo) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConversation,
          [userTwo],
        ),
        returnValue: _i13.Future<_i3.Unit>.value(_FakeUnit_8(
          this,
          Invocation.method(
            #createConversation,
            [userTwo],
          ),
        )),
      ) as _i13.Future<_i3.Unit>);

  @override
  _i13.Future<List<_i19.ConversationModel>> getConversations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversations,
          [],
        ),
        returnValue: _i13.Future<List<_i19.ConversationModel>>.value(
            <_i19.ConversationModel>[]),
      ) as _i13.Future<List<_i19.ConversationModel>>);

  @override
  _i13.Future<List<_i21.MessageModel>> getMessages(String? conversationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [conversationId],
        ),
        returnValue:
            _i13.Future<List<_i21.MessageModel>>.value(<_i21.MessageModel>[]),
      ) as _i13.Future<List<_i21.MessageModel>>);

  @override
  _i13.Future<_i3.Unit> sendMessage(
    String? content,
    String? conversationId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            content,
            conversationId,
          ],
        ),
        returnValue: _i13.Future<_i3.Unit>.value(_FakeUnit_8(
          this,
          Invocation.method(
            #sendMessage,
            [
              content,
              conversationId,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Unit>);
}

/// A class which mocks [NotificationsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationsRepository extends _i1.Mock
    implements _i6.NotificationsRepository {
  MockNotificationsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> createNewNotification(
    String? userId,
    String? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewNotification,
          [
            userId,
            content,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #createNewNotification,
            [
              userId,
              content,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i27.NotificationModel>>>
      getNotifications() => (super.noSuchMethod(
            Invocation.method(
              #getNotifications,
              [],
            ),
            returnValue: _i13.Future<
                    _i3
                    .Either<_i14.Failure, List<_i27.NotificationModel>>>.value(
                _FakeEither_1<_i14.Failure, List<_i27.NotificationModel>>(
              this,
              Invocation.method(
                #getNotifications,
                [],
              ),
            )),
          ) as _i13
              .Future<_i3.Either<_i14.Failure, List<_i27.NotificationModel>>>);
}

/// A class which mocks [NotificationsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationsRemoteDataSource extends _i1.Mock
    implements _i41.NotificationsRemoteDataSource {
  MockNotificationsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.Unit> createNewNotification(
    String? userId,
    String? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewNotification,
          [
            userId,
            content,
          ],
        ),
        returnValue: _i13.Future<_i3.Unit>.value(_FakeUnit_8(
          this,
          Invocation.method(
            #createNewNotification,
            [
              userId,
              content,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Unit>);

  @override
  _i13.Future<List<_i27.NotificationModel>> getNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotifications,
          [],
        ),
        returnValue: _i13.Future<List<_i27.NotificationModel>>.value(
            <_i27.NotificationModel>[]),
      ) as _i13.Future<List<_i27.NotificationModel>>);
}

/// A class which mocks [ProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileRepository extends _i1.Mock implements _i7.ProfileRepository {
  MockProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>> updateUser(
    _i9.UserModel? user,
    _i29.File? image,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [
            user,
            image,
          ],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i14.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #updateUser,
            [
              user,
              image,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i3.Unit>>);
}

/// A class which mocks [ProfileRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileRemoteDataSource extends _i1.Mock
    implements _i42.ProfileRemoteDataSource {
  MockProfileRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.Unit> updateUser(
    _i9.UserModel? user,
    _i29.File? image,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [
            user,
            image,
          ],
        ),
        returnValue: _i13.Future<_i3.Unit>.value(_FakeUnit_8(
          this,
          Invocation.method(
            #updateUser,
            [
              user,
              image,
            ],
          ),
        )),
      ) as _i13.Future<_i3.Unit>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i5.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>> getUserInfo() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [],
        ),
        returnValue: _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>>.value(
            _FakeEither_1<_i14.Failure, _i9.UserModel>(
          this,
          Invocation.method(
            #getUserInfo,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, _i9.UserModel>>);

  @override
  _i13.Future<_i3.Either<_i14.Failure, List<_i9.UserModel>>> getAllUsers() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllUsers,
          [],
        ),
        returnValue:
            _i13.Future<_i3.Either<_i14.Failure, List<_i9.UserModel>>>.value(
                _FakeEither_1<_i14.Failure, List<_i9.UserModel>>(
          this,
          Invocation.method(
            #getAllUsers,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Either<_i14.Failure, List<_i9.UserModel>>>);
}

/// A class which mocks [UserRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSource extends _i1.Mock
    implements _i43.UserRemoteDataSource {
  MockUserRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i9.UserModel> getUserInfo() => (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [],
        ),
        returnValue: _i13.Future<_i9.UserModel>.value(_FakeUserModel_7(
          this,
          Invocation.method(
            #getUserInfo,
            [],
          ),
        )),
      ) as _i13.Future<_i9.UserModel>);

  @override
  _i13.Future<List<_i9.UserModel>> getAllUsers() => (super.noSuchMethod(
        Invocation.method(
          #getAllUsers,
          [],
        ),
        returnValue: _i13.Future<List<_i9.UserModel>>.value(<_i9.UserModel>[]),
      ) as _i13.Future<List<_i9.UserModel>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i44.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);
}

/// A class which mocks [PrefUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrefUtils extends _i1.Mock implements _i45.PrefUtils {
  MockPrefUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setUserInfo({
    String? userId,
    String? name,
    String? email,
    String? password,
    String? profilePicture,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setUserInfo,
          [],
          {
            #userId: userId,
            #name: name,
            #email: email,
            #password: password,
            #profilePicture: profilePicture,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeUserInfo() => super.noSuchMethod(
        Invocation.method(
          #removeUserInfo,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i11.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.GoTrueClient get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeGoTrueClient_10(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i11.GoTrueClient);

  @override
  set auth(_i11.GoTrueClient? _auth) => super.noSuchMethod(
        Invocation.setter(
          #auth,
          _auth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.FunctionsClient get functions => (super.noSuchMethod(
        Invocation.getter(#functions),
        returnValue: _FakeFunctionsClient_11(
          this,
          Invocation.getter(#functions),
        ),
      ) as _i11.FunctionsClient);

  @override
  set functions(_i11.FunctionsClient? _functions) => super.noSuchMethod(
        Invocation.setter(
          #functions,
          _functions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.SupabaseStorageClient get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeSupabaseStorageClient_12(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i11.SupabaseStorageClient);

  @override
  set storage(_i11.SupabaseStorageClient? _storage) => super.noSuchMethod(
        Invocation.setter(
          #storage,
          _storage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.RealtimeClient get realtime => (super.noSuchMethod(
        Invocation.getter(#realtime),
        returnValue: _FakeRealtimeClient_13(
          this,
          Invocation.getter(#realtime),
        ),
      ) as _i11.RealtimeClient);

  @override
  set realtime(_i11.RealtimeClient? _realtime) => super.noSuchMethod(
        Invocation.setter(
          #realtime,
          _realtime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.PostgrestClient get rest => (super.noSuchMethod(
        Invocation.getter(#rest),
        returnValue: _FakePostgrestClient_14(
          this,
          Invocation.getter(#rest),
        ),
      ) as _i11.PostgrestClient);

  @override
  set rest(_i11.PostgrestClient? _rest) => super.noSuchMethod(
        Invocation.setter(
          #rest,
          _rest,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.SupabaseQueryBuilder from(String? table) => (super.noSuchMethod(
        Invocation.method(
          #from,
          [table],
        ),
        returnValue: _FakeSupabaseQueryBuilder_15(
          this,
          Invocation.method(
            #from,
            [table],
          ),
        ),
      ) as _i11.SupabaseQueryBuilder);

  @override
  _i11.SupabaseQuerySchema schema(String? schema) => (super.noSuchMethod(
        Invocation.method(
          #schema,
          [schema],
        ),
        returnValue: _FakeSupabaseQuerySchema_16(
          this,
          Invocation.method(
            #schema,
            [schema],
          ),
        ),
      ) as _i11.SupabaseQuerySchema);

  @override
  _i11.PostgrestFilterBuilder<T> rpc<T>(
    String? fn, {
    Map<String, dynamic>? params,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rpc,
          [fn],
          {#params: params},
        ),
        returnValue: _FakePostgrestFilterBuilder_17<T>(
          this,
          Invocation.method(
            #rpc,
            [fn],
            {#params: params},
          ),
        ),
      ) as _i11.PostgrestFilterBuilder<T>);

  @override
  _i11.RealtimeChannel channel(
    String? name, {
    _i11.RealtimeChannelConfig? opts = const _i11.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #channel,
          [name],
          {#opts: opts},
        ),
        returnValue: _FakeRealtimeChannel_18(
          this,
          Invocation.method(
            #channel,
            [name],
            {#opts: opts},
          ),
        ),
      ) as _i11.RealtimeChannel);

  @override
  List<_i11.RealtimeChannel> getChannels() => (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [],
        ),
        returnValue: <_i11.RealtimeChannel>[],
      ) as List<_i11.RealtimeChannel>);

  @override
  _i13.Future<String> removeChannel(_i11.RealtimeChannel? channel) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeChannel,
          [channel],
        ),
        returnValue: _i13.Future<String>.value(_i46.dummyValue<String>(
          this,
          Invocation.method(
            #removeChannel,
            [channel],
          ),
        )),
      ) as _i13.Future<String>);

  @override
  _i13.Future<List<String>> removeAllChannels() => (super.noSuchMethod(
        Invocation.method(
          #removeAllChannels,
          [],
        ),
        returnValue: _i13.Future<List<String>>.value(<String>[]),
      ) as _i13.Future<List<String>>);

  @override
  _i13.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}
